
versi1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b8  080049b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049c0  080049c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000010  080049d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080049d8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012051  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273d  00000000  00000000  0003208b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  000347c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00035a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc80  00000000  00000000  00036c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108ec  00000000  00000000  000538b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5b0d  00000000  00000000  0006419c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f44  00000000  00000000  00119cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	080048bc 	.word	0x080048bc

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	080048bc 	.word	0x080048bc

08000178 <__aeabi_fmul>:
 8000178:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800017c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000180:	bf1e      	ittt	ne
 8000182:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000186:	ea92 0f0c 	teqne	r2, ip
 800018a:	ea93 0f0c 	teqne	r3, ip
 800018e:	d06f      	beq.n	8000270 <__aeabi_fmul+0xf8>
 8000190:	441a      	add	r2, r3
 8000192:	ea80 0c01 	eor.w	ip, r0, r1
 8000196:	0240      	lsls	r0, r0, #9
 8000198:	bf18      	it	ne
 800019a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019e:	d01e      	beq.n	80001de <__aeabi_fmul+0x66>
 80001a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001ac:	fba0 3101 	umull	r3, r1, r0, r1
 80001b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b8:	bf3e      	ittt	cc
 80001ba:	0049      	lslcc	r1, r1, #1
 80001bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c0:	005b      	lslcc	r3, r3, #1
 80001c2:	ea40 0001 	orr.w	r0, r0, r1
 80001c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ca:	2afd      	cmp	r2, #253	; 0xfd
 80001cc:	d81d      	bhi.n	800020a <__aeabi_fmul+0x92>
 80001ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d6:	bf08      	it	eq
 80001d8:	f020 0001 	biceq.w	r0, r0, #1
 80001dc:	4770      	bx	lr
 80001de:	f090 0f00 	teq	r0, #0
 80001e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001e6:	bf08      	it	eq
 80001e8:	0249      	lsleq	r1, r1, #9
 80001ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f2:	3a7f      	subs	r2, #127	; 0x7f
 80001f4:	bfc2      	ittt	gt
 80001f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fe:	4770      	bxgt	lr
 8000200:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000204:	f04f 0300 	mov.w	r3, #0
 8000208:	3a01      	subs	r2, #1
 800020a:	dc5d      	bgt.n	80002c8 <__aeabi_fmul+0x150>
 800020c:	f112 0f19 	cmn.w	r2, #25
 8000210:	bfdc      	itt	le
 8000212:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000216:	4770      	bxle	lr
 8000218:	f1c2 0200 	rsb	r2, r2, #0
 800021c:	0041      	lsls	r1, r0, #1
 800021e:	fa21 f102 	lsr.w	r1, r1, r2
 8000222:	f1c2 0220 	rsb	r2, r2, #32
 8000226:	fa00 fc02 	lsl.w	ip, r0, r2
 800022a:	ea5f 0031 	movs.w	r0, r1, rrx
 800022e:	f140 0000 	adc.w	r0, r0, #0
 8000232:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000236:	bf08      	it	eq
 8000238:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800023c:	4770      	bx	lr
 800023e:	f092 0f00 	teq	r2, #0
 8000242:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0040      	lsleq	r0, r0, #1
 800024a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800024e:	3a01      	subeq	r2, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xce>
 8000252:	ea40 000c 	orr.w	r0, r0, ip
 8000256:	f093 0f00 	teq	r3, #0
 800025a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800025e:	bf02      	ittt	eq
 8000260:	0049      	lsleq	r1, r1, #1
 8000262:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000266:	3b01      	subeq	r3, #1
 8000268:	d0f9      	beq.n	800025e <__aeabi_fmul+0xe6>
 800026a:	ea41 010c 	orr.w	r1, r1, ip
 800026e:	e78f      	b.n	8000190 <__aeabi_fmul+0x18>
 8000270:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000274:	ea92 0f0c 	teq	r2, ip
 8000278:	bf18      	it	ne
 800027a:	ea93 0f0c 	teqne	r3, ip
 800027e:	d00a      	beq.n	8000296 <__aeabi_fmul+0x11e>
 8000280:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000284:	bf18      	it	ne
 8000286:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028a:	d1d8      	bne.n	800023e <__aeabi_fmul+0xc6>
 800028c:	ea80 0001 	eor.w	r0, r0, r1
 8000290:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f090 0f00 	teq	r0, #0
 800029a:	bf17      	itett	ne
 800029c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a0:	4608      	moveq	r0, r1
 80002a2:	f091 0f00 	teqne	r1, #0
 80002a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002aa:	d014      	beq.n	80002d6 <__aeabi_fmul+0x15e>
 80002ac:	ea92 0f0c 	teq	r2, ip
 80002b0:	d101      	bne.n	80002b6 <__aeabi_fmul+0x13e>
 80002b2:	0242      	lsls	r2, r0, #9
 80002b4:	d10f      	bne.n	80002d6 <__aeabi_fmul+0x15e>
 80002b6:	ea93 0f0c 	teq	r3, ip
 80002ba:	d103      	bne.n	80002c4 <__aeabi_fmul+0x14c>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	bf18      	it	ne
 80002c0:	4608      	movne	r0, r1
 80002c2:	d108      	bne.n	80002d6 <__aeabi_fmul+0x15e>
 80002c4:	ea80 0001 	eor.w	r0, r0, r1
 80002c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d4:	4770      	bx	lr
 80002d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	4688      	mov	r8, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14d      	bne.n	8000b98 <__udivmoddi4+0xac>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d968      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b152      	cbz	r2, 8000b1e <__udivmoddi4+0x32>
 8000b08:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0c:	f1c2 0120 	rsb	r1, r2, #32
 8000b10:	fa20 f101 	lsr.w	r1, r0, r1
 8000b14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b18:	ea41 0803 	orr.w	r8, r1, r3
 8000b1c:	4094      	lsls	r4, r2
 8000b1e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000b22:	0c21      	lsrs	r1, r4, #16
 8000b24:	fbb8 fef5 	udiv	lr, r8, r5
 8000b28:	fa1f f78c 	uxth.w	r7, ip
 8000b2c:	fb05 831e 	mls	r3, r5, lr, r8
 8000b30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b34:	fb0e f107 	mul.w	r1, lr, r7
 8000b38:	4299      	cmp	r1, r3
 8000b3a:	d90b      	bls.n	8000b54 <__udivmoddi4+0x68>
 8000b3c:	eb1c 0303 	adds.w	r3, ip, r3
 8000b40:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000b44:	f080 811e 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	f240 811b 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b52:	4463      	add	r3, ip
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0f5 	udiv	r0, r3, r5
 8000b5c:	fb05 3310 	mls	r3, r5, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 f707 	mul.w	r7, r0, r7
 8000b68:	42a7      	cmp	r7, r4
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x96>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b74:	f080 8108 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b78:	42a7      	cmp	r7, r4
 8000b7a:	f240 8105 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b88:	2100      	movs	r1, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa8>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	f000 80ee 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba8:	4608      	mov	r0, r1
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f183 	clz	r1, r3
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	42ab      	cmp	r3, r5
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb65 0303 	sbc.w	r3, r5, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	4698      	mov	r8, r3
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d0e2      	beq.n	8000b94 <__udivmoddi4+0xa8>
 8000bce:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd2:	e7df      	b.n	8000b94 <__udivmoddi4+0xa8>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8091 	bne.w	8000d04 <__udivmoddi4+0x218>
 8000be2:	eba1 050c 	sub.w	r5, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fbb5 f3f7 	udiv	r3, r5, r7
 8000bf4:	fb07 5013 	mls	r0, r7, r3, r5
 8000bf8:	0c25      	lsrs	r5, r4, #16
 8000bfa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	42a8      	cmp	r0, r5
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0505 	adds.w	r5, ip, r5
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	42a8      	cmp	r0, r5
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a2d      	subs	r5, r5, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb5 f0f7 	udiv	r0, r5, r7
 8000c20:	fb07 5510 	mls	r5, r7, r0, r5
 8000c24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4628      	mov	r0, r5
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79e      	b.n	8000b8a <__udivmoddi4+0x9e>
 8000c4c:	f1c1 0720 	rsb	r7, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa05 f301 	lsl.w	r3, r5, r1
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40fd      	lsrs	r5, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f301 	lsl.w	r3, r0, r1
 8000c6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	42a8      	cmp	r0, r5
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0505 	adds.w	r5, ip, r5
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	42a8      	cmp	r0, r5
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4465      	add	r5, ip
 8000ca4:	1a2d      	subs	r5, r5, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb5 f0f9 	udiv	r0, r5, r9
 8000cac:	fb09 5510 	mls	r5, r9, r0, r5
 8000cb0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	45ae      	cmp	lr, r5
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0505 	adds.w	r5, ip, r5
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	45ae      	cmp	lr, r5
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4465      	add	r5, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba5 050e 	sub.w	r5, r5, lr
 8000cda:	42a5      	cmp	r5, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15e      	cbz	r6, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb65 050e 	sbc.w	r5, r5, lr
 8000cee:	fa05 f707 	lsl.w	r7, r5, r7
 8000cf2:	fa22 f301 	lsr.w	r3, r2, r1
 8000cf6:	40cd      	lsrs	r5, r1
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c6 7500 	strd	r7, r5, [r6]
 8000cfe:	2100      	movs	r1, #0
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f103 	lsr.w	r1, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa25 f303 	lsr.w	r3, r5, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	430d      	orrs	r5, r1
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f1f7 	udiv	r1, r3, r7
 8000d24:	fb07 3011 	mls	r0, r7, r1, r3
 8000d28:	0c2b      	lsrs	r3, r5, #16
 8000d2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000d2e:	fb01 f00e 	mul.w	r0, r1, lr
 8000d32:	4298      	cmp	r0, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	4298      	cmp	r0, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3902      	subs	r1, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a1b      	subs	r3, r3, r0
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3310 	mls	r3, r7, r0, r3
 8000d58:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d5c:	fb00 f30e 	mul.w	r3, r0, lr
 8000d60:	42ab      	cmp	r3, r5
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0505 	adds.w	r5, ip, r5
 8000d68:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	42ab      	cmp	r3, r5
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4465      	add	r5, ip
 8000d76:	1aed      	subs	r5, r5, r3
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	4631      	mov	r1, r6
 8000d80:	4630      	mov	r0, r6
 8000d82:	e707      	b.n	8000b94 <__udivmoddi4+0xa8>
 8000d84:	4686      	mov	lr, r0
 8000d86:	e6e5      	b.n	8000b54 <__udivmoddi4+0x68>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6fa      	b.n	8000b82 <__udivmoddi4+0x96>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4641      	mov	r1, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4465      	add	r5, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4608      	mov	r0, r1
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de4:	68fb      	ldr	r3, [r7, #12]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fb86 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f842 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f976 	bl	80010ec <MX_GPIO_Init>
  MX_DAC_Init();
 8000e00:	f000 f8bc 	bl	8000f7c <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000e04:	f000 f926 	bl	8001054 <MX_USART2_UART_Init>
  MX_COMP2_Init();
 8000e08:	f000 f88c 	bl	8000f24 <MX_COMP2_Init>
  MX_LPTIM2_Init();
 8000e0c:	f000 f8e8 	bl	8000fe0 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4817      	ldr	r0, [pc, #92]	; (8000e70 <main+0x80>)
 8000e14:	f000 fee7 	bl	8001be6 <HAL_DAC_Start>
  var = val*(0xfff+1)/3.3;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <main+0x84>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff f9a9 	bl	8000178 <__aeabi_fmul>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fbbd 	bl	80005a8 <__aeabi_f2d>
 8000e2e:	a30e      	add	r3, pc, #56	; (adr r3, 8000e68 <main+0x78>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff fd3a 	bl	80008ac <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fe1c 	bl	8000a7c <__aeabi_d2uiz>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <main+0x88>)
 8000e48:	6013      	str	r3, [r2, #0]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var);
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <main+0x88>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <main+0x80>)
 8000e54:	f000 feff 	bl	8001c56 <HAL_DAC_SetValue>
  HAL_COMP_Start(&hcomp2);
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <main+0x8c>)
 8000e5a:	f000 fd77 	bl	800194c <HAL_COMP_Start>
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
//	  delay_us(2);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
//	  HAL_Delay(40);
//	  printf("Output Level -> %d\r\n", &hcomp2);
	  LC_GPIO_Init();
 8000e5e:	f000 f94f 	bl	8001100 <LC_GPIO_Init>
 8000e62:	e7fc      	b.n	8000e5e <main+0x6e>
 8000e64:	f3af 8000 	nop.w
 8000e68:	66666666 	.word	0x66666666
 8000e6c:	400a6666 	.word	0x400a6666
 8000e70:	20000058 	.word	0x20000058
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000138 	.word	0x20000138
 8000e7c:	2000002c 	.word	0x2000002c

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	; 0x68
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	2248      	movs	r2, #72	; 0x48
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 fd0c 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
 8000ea2:	615a      	str	r2, [r3, #20]
 8000ea4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <SystemClock_Config+0xa0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <SystemClock_Config+0xa0>)
 8000eb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <SystemClock_Config+0xa0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ece:	2360      	movs	r3, #96	; 0x60
 8000ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 feb2 	bl	8002c44 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 f971 	bl	80011cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000eea:	234f      	movs	r3, #79	; 0x4f
 8000eec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 fa38 	bl	800337c <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f12:	f000 f95b 	bl	80011cc <Error_Handler>
  }
}
 8000f16:	bf00      	nop
 8000f18:	3768      	adds	r7, #104	; 0x68
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	58000400 	.word	0x58000400

08000f24 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <MX_COMP2_Init+0x54>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC_CH1;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f30:	2240      	movs	r2, #64	; 0x40
 8000f32:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_COMP2_Init+0x50>)
 8000f60:	f000 fc10 	bl	8001784 <HAL_COMP_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000f6a:	f000 f92f 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000002c 	.word	0x2000002c
 8000f78:	40010204 	.word	0x40010204

08000f7c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2224      	movs	r2, #36	; 0x24
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fc8f 	bl	80048ac <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_DAC_Init+0x5c>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_DAC_Init+0x60>)
 8000f92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <MX_DAC_Init+0x5c>)
 8000f96:	f000 fe04 	bl	8001ba2 <HAL_DAC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_DAC_Init+0x28>
  {
    Error_Handler();
 8000fa0:	f000 f914 	bl	80011cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_DAC_Init+0x5c>)
 8000fc0:	f000 fe67 	bl	8001c92 <HAL_DAC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_DAC_Init+0x52>
  {
    Error_Handler();
 8000fca:	f000 f8ff 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000058 	.word	0x20000058
 8000fdc:	40007400 	.word	0x40007400

08000fe0 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
	hlptim2.Instance = LPTIM2;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8000fe6:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <MX_LPTIM2_Init+0x70>)
 8000fe8:	601a      	str	r2, [r3, #0]
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
	hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8001004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001008:	615a      	str	r2, [r3, #20]
	hlptim2.Init.Trigger.ActiveEdge = LPTIM_ACTIVEEDGE_RISING;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_LPTIM2_Init+0x6c>)
 800100c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001010:	619a      	str	r2, [r3, #24]
	hlptim2.Init.Trigger.SampleTime = LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_LPTIM2_Init+0x6c>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
	hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8001026:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
	hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP2;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <MX_LPTIM2_Init+0x6c>)
 800102e:	2202      	movs	r2, #2
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_LPTIM2_Init+0x6c>)
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_LPTIM2_Init+0x6c>)
 800103a:	f001 f8f1 	bl	8002220 <HAL_LPTIM_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_LPTIM2_Init+0x68>
  {
	  Error_Handler();
 8001044:	f000 f8c2 	bl	80011cc <Error_Handler>
//  {
//	  Error_Handler();
//  }
  /* USER CODE END LPTIM2_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000006c 	.word	0x2000006c
 8001050:	40009400 	.word	0x40009400

08001054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 800105a:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <MX_USART2_UART_Init+0x94>)
 800105c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109c:	4811      	ldr	r0, [pc, #68]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 800109e:	f002 fe68 	bl	8003d72 <HAL_UART_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010a8:	f000 f890 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 80010b0:	f003 fb10 	bl	80046d4 <HAL_UARTEx_SetTxFifoThreshold>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010ba:	f000 f887 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 80010c2:	f003 fb45 	bl	8004750 <HAL_UARTEx_SetRxFifoThreshold>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f000 f87e 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_USART2_UART_Init+0x90>)
 80010d2:	f003 fac7 	bl	8004664 <HAL_UARTEx_DisableFifoMode>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010dc:	f000 f876 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200000a8 	.word	0x200000a8
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	2002      	movs	r0, #2
 80010f2:	f7ff fe65 	bl	8000dc0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff fe62 	bl	8000dc0 <LL_AHB2_GRP1_EnableClock>

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LC_GPIO_Init>:

/* USER CODE BEGIN 4 */
static void LC_GPIO_Init(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2004      	movs	r0, #4
 8001108:	f7ff fe5a 	bl	8000dc0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800110c:	2080      	movs	r0, #128	; 0x80
 800110e:	f7ff fe57 	bl	8000dc0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fe54 	bl	8000dc0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff fe51 	bl	8000dc0 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Alternate = GPIO_AF12_COMP2;
 8001130:	230c      	movs	r3, #12
 8001132:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113c:	2310      	movs	r3, #16
 800113e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	481e      	ldr	r0, [pc, #120]	; (80011c0 <LC_GPIO_Init+0xc0>)
 8001146:	f000 fe99 	bl	8001e7c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 800114a:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800114e:	607b      	str	r3, [r7, #4]
		| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
		| GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
		| GPIO_PIN_12 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	2303      	movs	r3, #3
 8001152:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f000 fe8c 	bl	8001e7c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001168:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116e:	2302      	movs	r3, #2
 8001170:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <LC_GPIO_Init+0xc4>)
 8001178:	f000 fe80 	bl	8001e7c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <LC_GPIO_Init+0xc8>)
 8001182:	f000 fe7b 	bl	8001e7c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8001186:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 800118a:	607b      	str	r3, [r7, #4]
		| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
		| GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
		| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;

	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001190:	2302      	movs	r3, #2
 8001192:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <LC_GPIO_Init+0xc0>)
 800119a:	f000 fe6f 	bl	8001e7c <HAL_GPIO_Init>

	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2302      	movs	r3, #2
 80011a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011aa:	2310      	movs	r3, #16
 80011ac:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(COMP_INPUT_PLUS_IO1, &GPIO_InitStruct);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 fe62 	bl	8001e7c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.Alternate = GPIO_AF12_COMP2;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	#endif /* ENABLE_COMP_OUT */
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48001c00 	.word	0x48001c00

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>

080011d6 <LL_AHB2_GRP1_EnableClock>:
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4013      	ands	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4313      	orrs	r3, r2
 800121c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4013      	ands	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800123e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4313      	orrs	r3, r2
 800124c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4013      	ands	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_COMP_MspInit+0x68>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d11e      	bne.n	80012d4 <HAL_COMP_MspInit+0x60>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff ff9d 	bl	80011d6 <LL_AHB2_GRP1_EnableClock>
    /**COMP2 GPIO Configuration
    PB4     ------> COMP2_INP
    PB5     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800129c:	2310      	movs	r3, #16
 800129e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HAL_COMP_MspInit+0x6c>)
 80012b0:	f000 fde4 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012b4:	2320      	movs	r3, #32
 80012b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP2;
 80012c4:	230c      	movs	r3, #12
 80012c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <HAL_COMP_MspInit+0x6c>)
 80012d0:	f000 fdd4 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40010204 	.word	0x40010204
 80012e0:	48000400 	.word	0x48000400

080012e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_DAC_MspInit+0x54>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d114      	bne.n	8001330 <HAL_DAC_MspInit+0x4c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001306:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800130a:	f7ff ff7c 	bl	8001206 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff ff61 	bl	80011d6 <LL_AHB2_GRP1_EnableClock>
    /**DAC GPIO Configuration
    PA10     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f000 fda6 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40007400 	.word	0x40007400

0800133c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b096      	sub	sp, #88	; 0x58
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2238      	movs	r2, #56	; 0x38
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f003 faa5 	bl	80048ac <memset>
  if(hlptim->Instance==LPTIM2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <HAL_LPTIM_MspInit+0x84>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d125      	bne.n	80013b8 <HAL_LPTIM_MspInit+0x7c>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8001372:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fbbd 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8001388:	f7ff ff20 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800138c:	2020      	movs	r0, #32
 800138e:	f7ff ff52 	bl	8001236 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2002      	movs	r0, #2
 8001394:	f7ff ff1f 	bl	80011d6 <LL_AHB2_GRP1_EnableClock>
    /**LPTIM2 GPIO Configuration
    PB1     ------> LPTIM2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001398:	2302      	movs	r3, #2
 800139a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80013a8:	230e      	movs	r3, #14
 80013aa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013b0:	4619      	mov	r1, r3
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <HAL_LPTIM_MspInit+0x88>)
 80013b4:	f000 fd62 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	3758      	adds	r7, #88	; 0x58
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40009400 	.word	0x40009400
 80013c4:	48000400 	.word	0x48000400

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b096      	sub	sp, #88	; 0x58
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2238      	movs	r2, #56	; 0x38
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fa5f 	bl	80048ac <memset>
  if(huart->Instance==USART2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_UART_MspInit+0x88>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d126      	bne.n	8001446 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013fc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001400:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fb78 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001412:	f7ff fedb 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001416:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800141a:	f7ff fef4 	bl	8001206 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff fed9 	bl	80011d6 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001424:	230c      	movs	r3, #12
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001434:	2307      	movs	r3, #7
 8001436:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f000 fd1b 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3758      	adds	r7, #88	; 0x58
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40004400 	.word	0x40004400

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f88d 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b4:	f7ff fff5 	bl	80014a2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <LoopForever+0x6>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	; (80014f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <LoopForever+0xe>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	; (80014fc <LoopForever+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014de:	f003 f9c1 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e2:	f7ff fc85 	bl	8000df0 <main>

080014e6 <LoopForever>:

LoopForever:
    b LoopForever
 80014e6:	e7fe      	b.n	80014e6 <LoopForever>
  ldr   r0, =_estack
 80014e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014f4:	080049c8 	.word	0x080049c8
  ldr r2, =_sbss
 80014f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014fc:	20000140 	.word	0x20000140

08001500 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150e:	2003      	movs	r0, #3
 8001510:	f000 fb16 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001514:	f002 f914 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8001518:	4603      	mov	r3, r0
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_Init+0x3c>)
 800151c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151e:	200f      	movs	r0, #15
 8001520:	f000 f810 	bl	8001544 <HAL_InitTick>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	e001      	b.n	8001534 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001530:	f7ff fe99 	bl	8001266 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_InitTick+0x6c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d024      	beq.n	80015a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001558:	f002 f8f2 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 800155c:	4602      	mov	r2, r0
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_InitTick+0x6c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001568:	fbb3 f3f1 	udiv	r3, r3, r1
 800156c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fb0a 	bl	8001b8a <HAL_SYSTICK_Config>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10f      	bne.n	800159c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d809      	bhi.n	8001596 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001582:	2200      	movs	r2, #0
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f04f 30ff 	mov.w	r0, #4294967295
 800158a:	f000 fae4 	bl	8001b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_InitTick+0x70>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e007      	b.n	80015a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e004      	b.n	80015a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e001      	b.n	80015a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000000c 	.word	0x2000000c
 80015b4:	20000008 	.word	0x20000008

080015b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x1c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_IncTick+0x20>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <HAL_IncTick+0x20>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	2000013c 	.word	0x2000013c

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <HAL_GetTick+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	2000013c 	.word	0x2000013c

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fff0 	bl	80015dc <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffe0 	bl	80015dc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000000c 	.word	0x2000000c

08001638 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <LL_EXTI_EnableIT_0_31+0x24>)
 8001642:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001646:	4905      	ldr	r1, [pc, #20]	; (800165c <LL_EXTI_EnableIT_0_31+0x24>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4313      	orrs	r3, r2
 800164c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	58000800 	.word	0x58000800

08001660 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <LL_EXTI_DisableIT_0_31+0x24>)
 800166a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	43db      	mvns	r3, r3
 8001672:	4904      	ldr	r1, [pc, #16]	; (8001684 <LL_EXTI_DisableIT_0_31+0x24>)
 8001674:	4013      	ands	r3, r2
 8001676:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	58000800 	.word	0x58000800

08001688 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <LL_EXTI_EnableEvent_0_31+0x24>)
 8001692:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001696:	4905      	ldr	r1, [pc, #20]	; (80016ac <LL_EXTI_EnableEvent_0_31+0x24>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4313      	orrs	r3, r2
 800169c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	58000800 	.word	0x58000800

080016b0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80016ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4904      	ldr	r1, [pc, #16]	; (80016d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	58000800 	.word	0x58000800

080016d8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4904      	ldr	r1, [pc, #16]	; (80016f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]

}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	58000800 	.word	0x58000800

080016fc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	43db      	mvns	r3, r3
 800170c:	4903      	ldr	r1, [pc, #12]	; (800171c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800170e:	4013      	ands	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	58000800 	.word	0x58000800

08001720 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4904      	ldr	r1, [pc, #16]	; (8001740 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	58000800 	.word	0x58000800

08001744 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	43db      	mvns	r3, r3
 8001754:	4903      	ldr	r1, [pc, #12]	; (8001764 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001756:	4013      	ands	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	58000800 	.word	0x58000800

08001768 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001770:	4a03      	ldr	r2, [pc, #12]	; (8001780 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60d3      	str	r3, [r2, #12]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	58000800 	.word	0x58000800

08001784 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	77fb      	strb	r3, [r7, #31]
 800179e:	e0c5      	b.n	800192c <HAL_COMP_Init+0x1a8>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ae:	d102      	bne.n	80017b6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	77fb      	strb	r3, [r7, #31]
 80017b4:	e0ba      	b.n	800192c <HAL_COMP_Init+0x1a8>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fd4f 	bl	8001274 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017e0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <HAL_COMP_Init+0x1b4>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	6979      	ldr	r1, [r7, #20]
 8001816:	430b      	orrs	r3, r1
 8001818:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001822:	d106      	bne.n	8001832 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001824:	4b45      	ldr	r3, [pc, #276]	; (800193c <HAL_COMP_Init+0x1b8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a44      	ldr	r2, [pc, #272]	; (800193c <HAL_COMP_Init+0x1b8>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e005      	b.n	800183e <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <HAL_COMP_Init+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a41      	ldr	r2, [pc, #260]	; (800193c <HAL_COMP_Init+0x1b8>)
 8001838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800183c:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d016      	beq.n	800187a <HAL_COMP_Init+0xf6>
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d113      	bne.n	800187a <HAL_COMP_Init+0xf6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_COMP_Init+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <HAL_COMP_Init+0x1c0>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800186c:	e002      	b.n	8001874 <HAL_COMP_Init+0xf0>
      {
        wait_loop_index--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_COMP_Init+0xea>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a32      	ldr	r2, [pc, #200]	; (8001948 <HAL_COMP_Init+0x1c4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d102      	bne.n	800188a <HAL_COMP_Init+0x106>
 8001884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001888:	e001      	b.n	800188e <HAL_COMP_Init+0x10a>
 800188a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d037      	beq.n	800190c <HAL_COMP_Init+0x188>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_COMP_Init+0x12c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80018a8:	6938      	ldr	r0, [r7, #16]
 80018aa:	f7ff ff15 	bl	80016d8 <LL_EXTI_EnableRisingTrig_0_31>
 80018ae:	e002      	b.n	80018b6 <HAL_COMP_Init+0x132>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80018b0:	6938      	ldr	r0, [r7, #16]
 80018b2:	f7ff ff23 	bl	80016fc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_COMP_Init+0x146>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80018c2:	6938      	ldr	r0, [r7, #16]
 80018c4:	f7ff ff2c 	bl	8001720 <LL_EXTI_EnableFallingTrig_0_31>
 80018c8:	e002      	b.n	80018d0 <HAL_COMP_Init+0x14c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80018ca:	6938      	ldr	r0, [r7, #16]
 80018cc:	f7ff ff3a 	bl	8001744 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80018d0:	6938      	ldr	r0, [r7, #16]
 80018d2:	f7ff ff49 	bl	8001768 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_COMP_Init+0x166>
      {
#if defined(CORE_CM0PLUS)
        LL_C2_EXTI_EnableEvent_0_31(exti_line);
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80018e2:	6938      	ldr	r0, [r7, #16]
 80018e4:	f7ff fed0 	bl	8001688 <LL_EXTI_EnableEvent_0_31>
 80018e8:	e002      	b.n	80018f0 <HAL_COMP_Init+0x16c>
      else
      {
#if defined(CORE_CM0PLUS)
        LL_C2_EXTI_DisableEvent_0_31(exti_line);
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80018ea:	6938      	ldr	r0, [r7, #16]
 80018ec:	f7ff fee0 	bl	80016b0 <LL_EXTI_DisableEvent_0_31>
#endif /* CORE_CM0PLUS */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_COMP_Init+0x180>
      {
#if defined(CORE_CM0PLUS)
        LL_C2_EXTI_EnableIT_0_31(exti_line);
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80018fc:	6938      	ldr	r0, [r7, #16]
 80018fe:	f7ff fe9b 	bl	8001638 <LL_EXTI_EnableIT_0_31>
 8001902:	e009      	b.n	8001918 <HAL_COMP_Init+0x194>
      else
      {
#if defined(CORE_CM0PLUS)
        LL_C2_EXTI_DisableIT_0_31(exti_line);
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8001904:	6938      	ldr	r0, [r7, #16]
 8001906:	f7ff feab 	bl	8001660 <LL_EXTI_DisableIT_0_31>
 800190a:	e005      	b.n	8001918 <HAL_COMP_Init+0x194>
    {
      /* Disable EXTI event mode */
#if defined(CORE_CM0PLUS)
        LL_C2_EXTI_DisableEvent_0_31(exti_line);
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 800190c:	6938      	ldr	r0, [r7, #16]
 800190e:	f7ff fecf 	bl	80016b0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
#if defined(CORE_CM0PLUS)
      LL_C2_EXTI_DisableIT_0_31(exti_line);
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8001912:	6938      	ldr	r0, [r7, #16]
 8001914:	f7ff fea4 	bl	8001660 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <HAL_COMP_Init+0x1a8>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800192c:	7ffb      	ldrb	r3, [r7, #31]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	f9207c03 	.word	0xf9207c03
 800193c:	40010204 	.word	0x40010204
 8001940:	20000004 	.word	0x20000004
 8001944:	053e2d63 	.word	0x053e2d63
 8001948:	40010200 	.word	0x40010200

0800194c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e030      	b.n	80019ca <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001976:	d102      	bne.n	800197e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	e025      	b.n	80019ca <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d11d      	bne.n	80019c6 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_COMP_Start+0x8c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <HAL_COMP_Start+0x90>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	3301      	adds	r3, #1
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80019b6:	e002      	b.n	80019be <HAL_COMP_Start+0x72>
      {
        wait_loop_index--;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <HAL_COMP_Start+0x6c>
 80019c4:	e001      	b.n	80019ca <HAL_COMP_Start+0x7e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000004 	.word	0x20000004
 80019dc:	053e2d63 	.word	0x053e2d63

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff90 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff49 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff60 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ff92 	bl	8001a98 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff61 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffb2 	bl	8001afc <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e014      	b.n	8001bde <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fb8d 	bl	80012e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DAC_Start>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	795b      	ldrb	r3, [r3, #5]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_DAC_Start+0x16>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e027      	b.n	8001c4c <HAL_DAC_Start+0x66>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d107      	bne.n	8001c3e <HAL_DAC_Start+0x58>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	605a      	str	r2, [r3, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b087      	sub	sp, #28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	461a      	mov	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b088      	sub	sp, #32
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	795b      	ldrb	r3, [r3, #5]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_DAC_ConfigChannel+0x18>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e0e4      	b.n	8001e74 <HAL_DAC_ConfigChannel+0x1e2>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d151      	bne.n	8001d62 <HAL_DAC_ConfigChannel+0xd0>
    /* Sample on old configuration */
  {
    /* SampleTime */
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001cbe:	f7ff fc8d 	bl	80015dc <HAL_GetTick>
 8001cc2:	61f8      	str	r0, [r7, #28]

    /* SHSR1 can be written when BWST1 is cleared */
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001cc4:	e011      	b.n	8001cea <HAL_DAC_ConfigChannel+0x58>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001cc6:	f7ff fc89 	bl	80015dc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d90a      	bls.n	8001cea <HAL_DAC_ConfigChannel+0x58>
      {
        /* Update error code */
        SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f043 0208 	orr.w	r2, r3, #8
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	611a      	str	r2, [r3, #16]

        /* Change the DMA state */
        hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	711a      	strb	r2, [r3, #4]

        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0c4      	b.n	8001e74 <HAL_DAC_ConfigChannel+0x1e2>
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e6      	bne.n	8001cc6 <HAL_DAC_ConfigChannel+0x34>
      }
    }
    HAL_Delay(1);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff fc79 	bl	80015f0 <HAL_Delay>
    hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	6992      	ldr	r2, [r2, #24]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	ea02 0103 	and.w	r1, r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	21ff      	movs	r1, #255	; 0xff
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	ea02 0103 	and.w	r1, r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d11d      	bne.n	8001da6 <HAL_DAC_ConfigChannel+0x114>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	221f      	movs	r2, #31
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2207      	movs	r2, #7
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	22c0      	movs	r2, #192	; 0xc0
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	e140      	b.n	800210e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8132 	beq.w	8002108 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d005      	beq.n	8001ebc <HAL_GPIO_Init+0x40>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d130      	bne.n	8001f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 0201 	and.w	r2, r3, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d017      	beq.n	8001f5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d123      	bne.n	8001fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3208      	adds	r2, #8
 8001f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	6939      	ldr	r1, [r7, #16]
 8001faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0203 	and.w	r2, r3, #3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 808c 	beq.w	8002108 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff0:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	2207      	movs	r2, #7
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800201a:	d00d      	beq.n	8002038 <HAL_GPIO_Init+0x1bc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a44      	ldr	r2, [pc, #272]	; (8002130 <HAL_GPIO_Init+0x2b4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <HAL_GPIO_Init+0x1b8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a43      	ldr	r2, [pc, #268]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_GPIO_Init+0x1b4>
 800202c:	2302      	movs	r3, #2
 800202e:	e004      	b.n	800203a <HAL_GPIO_Init+0x1be>
 8002030:	2307      	movs	r3, #7
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x1be>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_GPIO_Init+0x1be>
 8002038:	2300      	movs	r3, #0
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	f002 0203 	and.w	r2, r2, #3
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	4093      	lsls	r3, r2
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800204a:	4938      	ldr	r1, [pc, #224]	; (800212c <HAL_GPIO_Init+0x2b0>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002058:	4b37      	ldr	r3, [pc, #220]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a6:	4a24      	ldr	r2, [pc, #144]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 80020ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020b2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	f47f aeb7 	bne.w	8001e8c <HAL_GPIO_Init+0x10>
  }
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	48000400 	.word	0x48000400
 8002134:	48000800 	.word	0x48000800
 8002138:	58000800 	.word	0x58000800

0800213c <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0c1b      	lsrs	r3, r3, #16
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	43db      	mvns	r3, r3
 8002154:	401a      	ands	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <LL_RCC_GetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE

  */
__STATIC_INLINE uint32_t LL_RCC_GetLPTIMClockSource(uint32_t LPTIMx)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4013      	ands	r3, r2
 8002182:	0c1a      	lsrs	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4313      	orrs	r3, r2
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	638b      	str	r3, [r1, #56]	; 0x38
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <LL_APB1_GRP2_ForceReset>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ec:	4013      	ands	r3, r2
 80021ee:	638b      	str	r3, [r1, #56]	; 0x38
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <LL_APB1_GRP2_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	43db      	mvns	r3, r3
 800220c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002210:	4013      	ands	r3, r2
 8002212:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0b6      	b.n	80023a0 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff f875 	bl	800133c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002272:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800227c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800227e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8a2 	bl	80023cc <LPTIM_WaitForFlag>
 8002288:	4603      	mov	r3, r0
 800228a:	2b03      	cmp	r3, #3
 800228c:	d101      	bne.n	8002292 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e086      	b.n	80023a0 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8ca 	bl	800242c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f889 	bl	80023b0 <HAL_LPTIM_GetState>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d101      	bne.n	80022a8 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e07b      	b.n	80023a0 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d004      	beq.n	80022c2 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022c0:	d103      	bne.n	80022ca <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f023 031e 	bic.w	r3, r3, #30
 80022c8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d005      	beq.n	80022e2 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_LPTIM_Init+0x188>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80022f2:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80022f8:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80022fe:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002304:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800231c:	4313      	orrs	r3, r2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d004      	beq.n	8002336 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002334:	d107      	bne.n	8002346 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800233e:	4313      	orrs	r3, r2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234e:	4293      	cmp	r3, r2
 8002350:	d00a      	beq.n	8002368 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800235a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002360:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_LPTIM_Init+0x18c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d108      	bne.n	800238c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	e004      	b.n	8002396 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002394:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	ff19f1fe 	.word	0xff19f1fe
 80023ac:	40007c00 	.word	0x40007c00

080023b0 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023be:	b2db      	uxtb	r3, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <LPTIM_WaitForFlag+0x58>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <LPTIM_WaitForFlag+0x5c>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	0b9b      	lsrs	r3, r3, #14
 80023e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	4013      	ands	r3, r2
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d002      	beq.n	8002416 <LPTIM_WaitForFlag+0x4a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ec      	bne.n	80023f0 <LPTIM_WaitForFlag+0x24>

  return result;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000004 	.word	0x20000004
 8002428:	d1b71759 	.word	0xd1b71759

0800242c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002438:	f3ef 8310 	mrs	r3, PRIMASK
 800243c:	613b      	str	r3, [r7, #16]
  return(result);
 800243e:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
 8002442:	2301      	movs	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f383 8810 	msr	PRIMASK, r3
}
 800244c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a90      	ldr	r2, [pc, #576]	; (8002694 <LPTIM_Disable+0x268>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d015      	beq.n	8002484 <LPTIM_Disable+0x58>
 8002458:	4a8e      	ldr	r2, [pc, #568]	; (8002694 <LPTIM_Disable+0x268>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d818      	bhi.n	8002490 <LPTIM_Disable+0x64>
 800245e:	4a8e      	ldr	r2, [pc, #568]	; (8002698 <LPTIM_Disable+0x26c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <LPTIM_Disable+0x40>
 8002464:	4a8d      	ldr	r2, [pc, #564]	; (800269c <LPTIM_Disable+0x270>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d006      	beq.n	8002478 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 800246a:	e011      	b.n	8002490 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800246c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8002470:	f7ff fe7d 	bl	800216e <LL_RCC_GetLPTIMClockSource>
 8002474:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8002476:	e00c      	b.n	8002492 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002478:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800247c:	f7ff fe77 	bl	800216e <LL_RCC_GetLPTIMClockSource>
 8002480:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8002482:	e006      	b.n	8002492 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8002484:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8002488:	f7ff fe71 	bl	800216e <LL_RCC_GetLPTIMClockSource>
 800248c:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 800248e:	e000      	b.n	8002492 <LPTIM_Disable+0x66>
      break;
 8002490:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a73      	ldr	r2, [pc, #460]	; (8002694 <LPTIM_Disable+0x268>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d019      	beq.n	8002500 <LPTIM_Disable+0xd4>
 80024cc:	4a71      	ldr	r2, [pc, #452]	; (8002694 <LPTIM_Disable+0x268>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d81d      	bhi.n	800250e <LPTIM_Disable+0xe2>
 80024d2:	4a71      	ldr	r2, [pc, #452]	; (8002698 <LPTIM_Disable+0x26c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <LPTIM_Disable+0xb4>
 80024d8:	4a70      	ldr	r2, [pc, #448]	; (800269c <LPTIM_Disable+0x270>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 80024de:	e016      	b.n	800250e <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80024e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80024e4:	f7ff fe55 	bl	8002192 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80024e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80024ec:	f7ff fe73 	bl	80021d6 <LL_APB1_GRP1_ReleaseReset>
      break;
 80024f0:	e00e      	b.n	8002510 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80024f2:	2020      	movs	r0, #32
 80024f4:	f7ff fe5e 	bl	80021b4 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80024f8:	2020      	movs	r0, #32
 80024fa:	f7ff fe7e 	bl	80021fa <LL_APB1_GRP2_ReleaseReset>
      break;
 80024fe:	e007      	b.n	8002510 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8002500:	2040      	movs	r0, #64	; 0x40
 8002502:	f7ff fe57 	bl	80021b4 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8002506:	2040      	movs	r0, #64	; 0x40
 8002508:	f7ff fe77 	bl	80021fa <LL_APB1_GRP2_ReleaseReset>
      break;
 800250c:	e000      	b.n	8002510 <LPTIM_Disable+0xe4>
      break;
 800250e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <LPTIM_Disable+0xf8>
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <LPTIM_Disable+0xf8>
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8096 	beq.w	8002650 <LPTIM_Disable+0x224>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5a      	ldr	r2, [pc, #360]	; (8002694 <LPTIM_Disable+0x268>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <LPTIM_Disable+0x12a>
 800252e:	4a59      	ldr	r2, [pc, #356]	; (8002694 <LPTIM_Disable+0x268>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d815      	bhi.n	8002560 <LPTIM_Disable+0x134>
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <LPTIM_Disable+0x26c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d003      	beq.n	8002542 <LPTIM_Disable+0x116>
 800253a:	4a58      	ldr	r2, [pc, #352]	; (800269c <LPTIM_Disable+0x270>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d005      	beq.n	800254c <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8002540:	e00e      	b.n	8002560 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002542:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8002546:	f7ff fdf9 	bl	800213c <LL_RCC_SetLPTIMClockSource>
        break;
 800254a:	e00a      	b.n	8002562 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800254c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8002550:	f7ff fdf4 	bl	800213c <LL_RCC_SetLPTIMClockSource>
        break;
 8002554:	e005      	b.n	8002562 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8002556:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 800255a:	f7ff fdef 	bl	800213c <LL_RCC_SetLPTIMClockSource>
        break;
 800255e:	e000      	b.n	8002562 <LPTIM_Disable+0x136>
        break;
 8002560:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01a      	beq.n	800259e <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002580:	2108      	movs	r1, #8
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff22 	bl	80023cc <LPTIM_WaitForFlag>
 8002588:	4603      	mov	r3, r0
 800258a:	2b03      	cmp	r3, #3
 800258c:	d103      	bne.n	8002596 <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2208      	movs	r2, #8
 800259c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01a      	beq.n	80025da <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80025bc:	2110      	movs	r1, #16
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ff04 	bl	80023cc <LPTIM_WaitForFlag>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d103      	bne.n	80025d2 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2210      	movs	r2, #16
 80025d8:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80025f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fee5 	bl	80023cc <LPTIM_WaitForFlag>
 8002602:	4603      	mov	r3, r0
 8002604:	2b03      	cmp	r3, #3
 8002606:	d103      	bne.n	8002610 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002618:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <LPTIM_Disable+0x268>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d011      	beq.n	8002648 <LPTIM_Disable+0x21c>
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <LPTIM_Disable+0x268>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d814      	bhi.n	8002654 <LPTIM_Disable+0x228>
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <LPTIM_Disable+0x26c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <LPTIM_Disable+0x20c>
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <LPTIM_Disable+0x270>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8002636:	e00d      	b.n	8002654 <LPTIM_Disable+0x228>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002638:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800263a:	f7ff fd7f 	bl	800213c <LL_RCC_SetLPTIMClockSource>
        break;
 800263e:	e00a      	b.n	8002656 <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8002640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002642:	f7ff fd7b 	bl	800213c <LL_RCC_SetLPTIMClockSource>
        break;
 8002646:	e006      	b.n	8002656 <LPTIM_Disable+0x22a>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8002648:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800264a:	f7ff fd77 	bl	800213c <LL_RCC_SetLPTIMClockSource>
        break;
 800264e:	e002      	b.n	8002656 <LPTIM_Disable+0x22a>
    }
  }
 8002650:	bf00      	nop
 8002652:	e000      	b.n	8002656 <LPTIM_Disable+0x22a>
        break;
 8002654:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266c:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002674:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	621a      	str	r2, [r3, #32]
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f383 8810 	msr	PRIMASK, r3
}
 8002688:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800268a:	bf00      	nop
 800268c:	3738      	adds	r7, #56	; 0x38
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40009800 	.word	0x40009800
 8002698:	40007c00 	.word	0x40007c00
 800269c:	40009400 	.word	0x40009400

080026a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a03      	ldr	r2, [pc, #12]	; (80026b8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	58000400 	.word	0x58000400

080026bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_PWREx_GetVoltageRange+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	58000400 	.word	0x58000400

080026d4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e4:	d101      	bne.n	80026ea <LL_PWR_IsEnabledBkUpAccess+0x16>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <LL_PWR_IsEnabledBkUpAccess+0x18>
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	58000400 	.word	0x58000400

080026f8 <LL_RCC_HSE_EnableTcxo>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <LL_RCC_HSE_DisableTcxo>:
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002742:	d101      	bne.n	8002748 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <LL_RCC_HSE_Enable>:
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <LL_RCC_HSE_Disable>:
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <LL_RCC_HSE_IsReady>:
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800279c:	d101      	bne.n	80027a2 <LL_RCC_HSE_IsReady+0x18>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <LL_RCC_HSE_IsReady+0x1a>
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_HSI_Enable>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <LL_RCC_HSI_Disable>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_HSI_IsReady>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d101      	bne.n	80027fc <LL_RCC_HSI_IsReady+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_RCC_HSI_IsReady+0x1a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <LL_RCC_LSE_IsReady>:
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b02      	cmp	r3, #2
 8002840:	d101      	bne.n	8002846 <LL_RCC_LSE_IsReady+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_RCC_LSE_IsReady+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <LL_RCC_LSI_Enable>:
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <LL_RCC_LSI_Disable>:
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <LL_RCC_LSI_IsReady>:
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d101      	bne.n	80028a8 <LL_RCC_LSI_IsReady+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_RCC_LSI_IsReady+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <LL_RCC_MSI_Enable>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6013      	str	r3, [r2, #0]
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <LL_RCC_MSI_Disable>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6013      	str	r3, [r2, #0]
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_MSI_IsReady>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d101      	bne.n	8002900 <LL_RCC_MSI_IsReady+0x16>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_RCC_MSI_IsReady+0x18>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b08      	cmp	r3, #8
 800291a:	d101      	bne.n	8002920 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <LL_RCC_MSI_GetRange>:
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <LL_RCC_SetSysClkSource>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_GetSysClkSource>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 030c 	and.w	r3, r3, #12
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <LL_RCC_SetAHBPrescaler>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_SetAHB3Prescaler>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a1c:	f023 020f 	bic.w	r2, r3, #15
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_SetAPB1Prescaler>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_SetAPB2Prescaler>:
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_GetAHBPrescaler>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <LL_RCC_GetAHB3Prescaler>:
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_GetAPB1Prescaler>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <LL_RCC_GetAPB2Prescaler>:
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b2a:	d101      	bne.n	8002b30 <LL_RCC_PLL_IsReady+0x18>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <LL_RCC_PLL_IsReady+0x1a>
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0303 	and.w	r3, r3, #3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d101      	bne.n	8002bac <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bca:	d101      	bne.n	8002bd0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bee:	d101      	bne.n	8002bf4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c10:	d101      	bne.n	8002c16 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c32:	d101      	bne.n	8002c38 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e38b      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c56:	f7ff fea6 	bl	80029a6 <LL_RCC_GetSysClkSource>
 8002c5a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c5c:	f7ff ff8f 	bl	8002b7e <LL_RCC_PLL_GetMainSource>
 8002c60:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80c9 	beq.w	8002e02 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3e>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d17b      	bne.n	8002d74 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d178      	bne.n	8002d74 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c82:	f7ff fe32 	bl	80028ea <LL_RCC_MSI_IsReady>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_OscConfig+0x54>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e36a      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x72>
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb4:	e006      	b.n	8002cc4 <HAL_RCC_OscConfig+0x80>
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d222      	bcs.n	8002d0e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fd6f 	bl	80037b0 <RCC_SetFlashLatencyFromMSIRange>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e348      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce6:	f043 0308 	orr.w	r3, r3, #8
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fe26 	bl	8002958 <LL_RCC_MSI_SetCalibTrimming>
 8002d0c:	e021      	b.n	8002d52 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d18:	f043 0308 	orr.w	r3, r3, #8
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fe0d 	bl	8002958 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fd34 	bl	80037b0 <RCC_SetFlashLatencyFromMSIRange>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e30d      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d52:	f000 fcf5 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4aa1      	ldr	r2, [pc, #644]	; (8002fe0 <HAL_RCC_OscConfig+0x39c>)
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d5c:	4ba1      	ldr	r3, [pc, #644]	; (8002fe4 <HAL_RCC_OscConfig+0x3a0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fbef 	bl	8001544 <HAL_InitTick>
 8002d66:	4603      	mov	r3, r0
 8002d68:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d047      	beq.n	8002e00 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	e2fc      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d02c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d7c:	f7ff fd99 	bl	80028b2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fc2c 	bl	80015dc <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d88:	f7fe fc28 	bl	80015dc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e2e9      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d9a:	f7ff fda6 	bl	80028ea <LL_RCC_MSI_IsReady>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f1      	beq.n	8002d88 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fdc2 	bl	8002958 <LL_RCC_MSI_SetCalibTrimming>
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dd6:	f7ff fd7a 	bl	80028ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fbff 	bl	80015dc <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de2:	f7fe fbfb 	bl	80015dc <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e2bc      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002df4:	f7ff fd79 	bl	80028ea <LL_RCC_MSI_IsReady>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f1      	bne.n	8002de2 <HAL_RCC_OscConfig+0x19e>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e00:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d05f      	beq.n	8002ece <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_OscConfig+0x1dc>
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d10d      	bne.n	8002e36 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d10a      	bne.n	8002e36 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	f7ff fcb3 	bl	800278a <LL_RCC_HSE_IsReady>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d050      	beq.n	8002ecc <HAL_RCC_OscConfig+0x288>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d14c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e29b      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d102      	bne.n	8002e5c <HAL_RCC_OscConfig+0x218>
 8002e56:	f7ff fc7c 	bl	8002752 <LL_RCC_HSE_Enable>
 8002e5a:	e00d      	b.n	8002e78 <HAL_RCC_OscConfig+0x234>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002e64:	d104      	bne.n	8002e70 <HAL_RCC_OscConfig+0x22c>
 8002e66:	f7ff fc47 	bl	80026f8 <LL_RCC_HSE_EnableTcxo>
 8002e6a:	f7ff fc72 	bl	8002752 <LL_RCC_HSE_Enable>
 8002e6e:	e003      	b.n	8002e78 <HAL_RCC_OscConfig+0x234>
 8002e70:	f7ff fc7d 	bl	800276e <LL_RCC_HSE_Disable>
 8002e74:	f7ff fc4e 	bl	8002714 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d012      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe fbac 	bl	80015dc <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fba8 	bl	80015dc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e269      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e9a:	f7ff fc76 	bl	800278a <LL_RCC_HSE_IsReady>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f1      	beq.n	8002e88 <HAL_RCC_OscConfig+0x244>
 8002ea4:	e013      	b.n	8002ece <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fb99 	bl	80015dc <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eae:	f7fe fb95 	bl	80015dc <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e256      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ec0:	f7ff fc63 	bl	800278a <LL_RCC_HSE_IsReady>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f1      	bne.n	8002eae <HAL_RCC_OscConfig+0x26a>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04b      	beq.n	8002f72 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x2a8>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d113      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d110      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	f7ff fc7a 	bl	80027e4 <LL_RCC_HSI_IsReady>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x2be>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e235      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fc7d 	bl	8002806 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f0c:	e031      	b.n	8002f72 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f16:	f7ff fc49 	bl	80027ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fb5f 	bl	80015dc <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe fb5b 	bl	80015dc <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e21c      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f34:	f7ff fc56 	bl	80027e4 <LL_RCC_HSI_IsReady>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f1      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fc5f 	bl	8002806 <LL_RCC_HSI_SetCalibTrimming>
 8002f48:	e013      	b.n	8002f72 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4a:	f7ff fc3d 	bl	80027c8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fb45 	bl	80015dc <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f56:	f7fe fb41 	bl	80015dc <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e202      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f68:	f7ff fc3c 	bl	80027e4 <LL_RCC_HSI_IsReady>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f1      	bne.n	8002f56 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06f      	beq.n	800305e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d057      	beq.n	8003036 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d036      	beq.n	800300c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1db      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d018      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8002fc0:	f7ff fc56 	bl	8002870 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fc4:	f7fe fb0a 	bl	80015dc <HAL_GetTick>
 8002fc8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002fca:	e00d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fb06 	bl	80015dc <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b11      	cmp	r3, #17
 8002fd8:	d906      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1c7      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
 8002fde:	bf00      	nop
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	20000008 	.word	0x20000008
          while (LL_RCC_LSI_IsReady() != 0U)
 8002fe8:	f7ff fc52 	bl	8002890 <LL_RCC_LSI_IsReady>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ec      	bne.n	8002fcc <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffa:	f023 0210 	bic.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300c:	f7ff fc20 	bl	8002850 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe fae4 	bl	80015dc <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe fae0 	bl	80015dc <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b11      	cmp	r3, #17
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1a1      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800302a:	f7ff fc31 	bl	8002890 <LL_RCC_LSI_IsReady>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f1      	beq.n	8003018 <HAL_RCC_OscConfig+0x3d4>
 8003034:	e013      	b.n	800305e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	f7ff fc1b 	bl	8002870 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fe facf 	bl	80015dc <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003042:	f7fe facb 	bl	80015dc <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b11      	cmp	r3, #17
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e18c      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003054:	f7ff fc1c 	bl	8002890 <LL_RCC_LSI_IsReady>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f1      	bne.n	8003042 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80d8 	beq.w	800321c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800306c:	f7ff fb32 	bl	80026d4 <LL_PWR_IsEnabledBkUpAccess>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d113      	bne.n	800309e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003076:	f7ff fb13 	bl	80026a0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7fe faaf 	bl	80015dc <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7fe faab 	bl	80015dc <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e16c      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003094:	f7ff fb1e 	bl	80026d4 <LL_PWR_IsEnabledBkUpAccess>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f1      	beq.n	8003082 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d07b      	beq.n	800319e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b85      	cmp	r3, #133	; 0x85
 80030ac:	d003      	beq.n	80030b6 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe fa87 	bl	80015dc <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe fa79 	bl	80015dc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e138      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80030fc:	f7ff fb97 	bl	800282e <LL_RCC_LSE_IsReady>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ef      	beq.n	80030e6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b81      	cmp	r3, #129	; 0x81
 800310c:	d003      	beq.n	8003116 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b85      	cmp	r3, #133	; 0x85
 8003114:	d121      	bne.n	800315a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fa61 	bl	80015dc <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe fa53 	bl	80015dc <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e112      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ec      	beq.n	8003132 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003158:	e060      	b.n	800321c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fa3f 	bl	80015dc <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fa31 	bl	80015dc <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0f0      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ec      	bne.n	8003176 <HAL_RCC_OscConfig+0x532>
 800319c:	e03e      	b.n	800321c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fe fa1d 	bl	80015dc <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe fa0f 	bl	80015dc <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0ce      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ec      	bne.n	80031ba <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe f9fc 	bl	80015dc <HAL_GetTick>
 80031e4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe f9ee 	bl	80015dc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0ad      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003212:	f7ff fb0c 	bl	800282e <LL_RCC_LSE_IsReady>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ef      	bne.n	80031fc <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a3 	beq.w	800336c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	d076      	beq.n	800331a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	2b02      	cmp	r3, #2
 8003232:	d14b      	bne.n	80032cc <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003234:	f7ff fc62 	bl	8002afc <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe f9d0 	bl	80015dc <HAL_GetTick>
 800323c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe f9cc 	bl	80015dc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e08d      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003252:	f7ff fc61 	bl	8002b18 <LL_RCC_PLL_IsReady>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f1      	bne.n	8003240 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	4b45      	ldr	r3, [pc, #276]	; (8003378 <HAL_RCC_OscConfig+0x734>)
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800326e:	4311      	orrs	r1, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003274:	0212      	lsls	r2, r2, #8
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003288:	430a      	orrs	r2, r1
 800328a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328e:	4313      	orrs	r3, r2
 8003290:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003292:	f7ff fc25 	bl	8002ae0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe f999 	bl	80015dc <HAL_GetTick>
 80032aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe f995 	bl	80015dc <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b0a      	cmp	r3, #10
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e056      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80032c0:	f7ff fc2a 	bl	8002b18 <LL_RCC_PLL_IsReady>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f1      	beq.n	80032ae <HAL_RCC_OscConfig+0x66a>
 80032ca:	e04f      	b.n	800336c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	f7ff fc16 	bl	8002afc <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ea:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe f972 	bl	80015dc <HAL_GetTick>
 80032f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe f96e 	bl	80015dc <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b0a      	cmp	r3, #10
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e02f      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800330e:	f7ff fc03 	bl	8002b18 <LL_RCC_PLL_IsReady>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f1      	bne.n	80032fc <HAL_RCC_OscConfig+0x6b8>
 8003318:	e028      	b.n	800336c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e023      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	429a      	cmp	r2, r3
 800333a:	d115      	bne.n	8003368 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003346:	429a      	cmp	r2, r3
 8003348:	d10e      	bne.n	8003368 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	429a      	cmp	r2, r3
 8003358:	d106      	bne.n	8003368 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	11c1808c 	.word	0x11c1808c

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e12c      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b98      	ldr	r3, [pc, #608]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d91b      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b95      	ldr	r3, [pc, #596]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0207 	bic.w	r2, r3, #7
 80033a6:	4993      	ldr	r1, [pc, #588]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ae:	f7fe f915 	bl	80015dc <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033b6:	f7fe f911 	bl	80015dc <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e110      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c8:	4b8a      	ldr	r3, [pc, #552]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d1ef      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fae8 	bl	80029bc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033ec:	f7fe f8f6 	bl	80015dc <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033f4:	f7fe f8f2 	bl	80015dc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0f1      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003406:	f7ff fbc5 	bl	8002b94 <LL_RCC_IsActiveFlag_HPRE>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f1      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d016      	beq.n	800344a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fade 	bl	80029e2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003426:	f7fe f8d9 	bl	80015dc <HAL_GetTick>
 800342a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800342e:	f7fe f8d5 	bl	80015dc <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0d4      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003440:	f7ff fbb9 	bl	8002bb6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f1      	beq.n	800342e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fad6 	bl	8002a0c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003460:	f7fe f8bc 	bl	80015dc <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003468:	f7fe f8b8 	bl	80015dc <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0b7      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800347a:	f7ff fbae 	bl	8002bda <LL_RCC_IsActiveFlag_SHDHPRE>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f1      	beq.n	8003468 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d016      	beq.n	80034be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff facf 	bl	8002a38 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800349a:	f7fe f89f 	bl	80015dc <HAL_GetTick>
 800349e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034a2:	f7fe f89b 	bl	80015dc <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e09a      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034b4:	f7ff fba3 	bl	8002bfe <LL_RCC_IsActiveFlag_PPRE1>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f1      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fac4 	bl	8002a5e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034d6:	f7fe f881 	bl	80015dc <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034de:	f7fe f87d 	bl	80015dc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e07c      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034f0:	f7ff fb96 	bl	8002c20 <LL_RCC_IsActiveFlag_PPRE2>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f1      	beq.n	80034de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d043      	beq.n	800358e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d106      	bne.n	800351c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800350e:	f7ff f93c 	bl	800278a <LL_RCC_HSE_IsReady>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11e      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e066      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003524:	f7ff faf8 	bl	8002b18 <LL_RCC_PLL_IsReady>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d113      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e05b      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800353a:	f7ff f9d6 	bl	80028ea <LL_RCC_MSI_IsReady>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d108      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e050      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003548:	f7ff f94c 	bl	80027e4 <LL_RCC_HSI_IsReady>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e049      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fa10 	bl	8002980 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003560:	f7fe f83c 	bl	80015dc <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	e00a      	b.n	800357e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003568:	f7fe f838 	bl	80015dc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e035      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	f7ff fa12 	bl	80029a6 <LL_RCC_GetSysClkSource>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	429a      	cmp	r2, r3
 800358c:	d1ec      	bne.n	8003568 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d21b      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 0207 	bic.w	r2, r3, #7
 80035a4:	4913      	ldr	r1, [pc, #76]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fe f816 	bl	80015dc <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035b4:	f7fe f812 	bl	80015dc <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e011      	b.n	80035ea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x278>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1ef      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035d4:	f000 f8b4 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 80035d8:	4603      	mov	r3, r0
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <HAL_RCC_ClockConfig+0x27c>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_RCC_ClockConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd ffae 	bl	8001544 <HAL_InitTick>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	58004000 	.word	0x58004000
 80035f8:	20000004 	.word	0x20000004
 80035fc:	20000008 	.word	0x20000008

08003600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360e:	f7ff f9ca 	bl	80029a6 <LL_RCC_GetSysClkSource>
 8003612:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003614:	f7ff fab3 	bl	8002b7e <LL_RCC_PLL_GetMainSource>
 8003618:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x2c>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d139      	bne.n	800369a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d136      	bne.n	800369a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800362c:	f7ff f96d 	bl	800290a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_RCC_GetSysClockFreq+0x62>
 8003636:	f7ff f968 	bl	800290a <LL_RCC_MSI_IsEnabledRangeSelect>
 800363a:	4603      	mov	r3, r0
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_GetSysClockFreq+0x4e>
 8003640:	f7ff f973 	bl	800292a <LL_RCC_MSI_GetRange>
 8003644:	4603      	mov	r3, r0
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	e005      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x5a>
 800364e:	f7ff f977 	bl	8002940 <LL_RCC_MSI_GetRangeAfterStandby>
 8003652:	4603      	mov	r3, r0
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	4a36      	ldr	r2, [pc, #216]	; (8003734 <HAL_RCC_GetSysClockFreq+0x134>)
 800365c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003660:	e014      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x8c>
 8003662:	f7ff f952 	bl	800290a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d106      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x7a>
 800366c:	f7ff f95d 	bl	800292a <LL_RCC_MSI_GetRange>
 8003670:	4603      	mov	r3, r0
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	e005      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x86>
 800367a:	f7ff f961 	bl	8002940 <LL_RCC_MSI_GetRangeAfterStandby>
 800367e:	4603      	mov	r3, r0
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <HAL_RCC_GetSysClockFreq+0x134>)
 8003688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d115      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003698:	e012      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d102      	bne.n	80036a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_GetSysClockFreq+0x138>)
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e00c      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d109      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036ac:	f7ff f840 	bl	8002730 <LL_RCC_HSE_IsEnabledDiv2>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_GetSysClockFreq+0x138>)
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e001      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_RCC_GetSysClockFreq+0x13c>)
 80036be:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c0:	f7ff f971 	bl	80029a6 <LL_RCC_GetSysClkSource>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d12f      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036ca:	f7ff fa58 	bl	8002b7e <LL_RCC_PLL_GetMainSource>
 80036ce:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0xde>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d003      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0xe4>
 80036dc:	e00d      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80036de:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_RCC_GetSysClockFreq+0x138>)
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	e00d      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036e4:	f7ff f824 	bl	8002730 <LL_RCC_HSE_IsEnabledDiv2>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_RCC_GetSysClockFreq+0x138>)
 80036f0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80036f2:	e005      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_RCC_GetSysClockFreq+0x13c>)
 80036f6:	60fb      	str	r3, [r7, #12]
        break;
 80036f8:	e002      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	60fb      	str	r3, [r7, #12]
        break;
 80036fe:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003700:	f7ff fa1b 	bl	8002b3a <LL_RCC_PLL_GetN>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	fb03 f402 	mul.w	r4, r3, r2
 800370c:	f7ff fa2c 	bl	8002b68 <LL_RCC_PLL_GetDivider>
 8003710:	4603      	mov	r3, r0
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	3301      	adds	r3, #1
 8003716:	fbb4 f4f3 	udiv	r4, r4, r3
 800371a:	f7ff fa1a 	bl	8002b52 <LL_RCC_PLL_GetR>
 800371e:	4603      	mov	r3, r0
 8003720:	0f5b      	lsrs	r3, r3, #29
 8003722:	3301      	adds	r3, #1
 8003724:	fbb4 f3f3 	udiv	r3, r4, r3
 8003728:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800372a:	697b      	ldr	r3, [r7, #20]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}
 8003734:	08004950 	.word	0x08004950
 8003738:	00f42400 	.word	0x00f42400
 800373c:	01e84800 	.word	0x01e84800

08003740 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003740:	b598      	push	{r3, r4, r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003744:	f7ff ff5c 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8003748:	4604      	mov	r4, r0
 800374a:	f7ff f99b 	bl	8002a84 <LL_RCC_GetAHBPrescaler>
 800374e:	4603      	mov	r3, r0
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	4a03      	ldr	r2, [pc, #12]	; (8003764 <HAL_RCC_GetHCLKFreq+0x24>)
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd98      	pop	{r3, r4, r7, pc}
 8003764:	080048f0 	.word	0x080048f0

08003768 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b598      	push	{r3, r4, r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800376c:	f7ff ffe8 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8003770:	4604      	mov	r4, r0
 8003772:	f7ff f99f 	bl	8002ab4 <LL_RCC_GetAPB1Prescaler>
 8003776:	4603      	mov	r3, r0
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	4a03      	ldr	r2, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x20>)
 800377c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003780:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd98      	pop	{r3, r4, r7, pc}
 8003788:	08004930 	.word	0x08004930

0800378c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b598      	push	{r3, r4, r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003790:	f7ff ffd6 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8003794:	4604      	mov	r4, r0
 8003796:	f7ff f998 	bl	8002aca <LL_RCC_GetAPB2Prescaler>
 800379a:	4603      	mov	r3, r0
 800379c:	0adb      	lsrs	r3, r3, #11
 800379e:	4a03      	ldr	r2, [pc, #12]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd98      	pop	{r3, r4, r7, pc}
 80037ac:	08004930 	.word	0x08004930

080037b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	4a10      	ldr	r2, [pc, #64]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80037c8:	f7ff f967 	bl	8002a9a <LL_RCC_GetAHB3Prescaler>
 80037cc:	4603      	mov	r3, r0
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80037d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4a09      	ldr	r2, [pc, #36]	; (800380c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	0c9c      	lsrs	r4, r3, #18
 80037ec:	f7fe ff66 	bl	80026bc <HAL_PWREx_GetVoltageRange>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4619      	mov	r1, r3
 80037f4:	4620      	mov	r0, r4
 80037f6:	f000 f80b 	bl	8003810 <RCC_SetFlashLatency>
 80037fa:	4603      	mov	r3, r0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}
 8003804:	08004950 	.word	0x08004950
 8003808:	080048f0 	.word	0x080048f0
 800380c:	431bde83 	.word	0x431bde83

08003810 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08e      	sub	sp, #56	; 0x38
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800381a:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <RCC_SetFlashLatency+0xf4>)
 800381c:	f107 0320 	add.w	r3, r7, #32
 8003820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003824:	6018      	str	r0, [r3, #0]
 8003826:	3304      	adds	r3, #4
 8003828:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800382a:	4a37      	ldr	r2, [pc, #220]	; (8003908 <RCC_SetFlashLatency+0xf8>)
 800382c:	f107 0318 	add.w	r3, r7, #24
 8003830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003834:	6018      	str	r0, [r3, #0]
 8003836:	3304      	adds	r3, #4
 8003838:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800383a:	4a34      	ldr	r2, [pc, #208]	; (800390c <RCC_SetFlashLatency+0xfc>)
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	ca07      	ldmia	r2, {r0, r1, r2}
 8003842:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003846:	2300      	movs	r3, #0
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003850:	d11b      	bne.n	800388a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003852:	2300      	movs	r3, #0
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
 8003856:	e014      	b.n	8003882 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	3338      	adds	r3, #56	; 0x38
 800385e:	443b      	add	r3, r7
 8003860:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4293      	cmp	r3, r2
 800386a:	d807      	bhi.n	800387c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3338      	adds	r3, #56	; 0x38
 8003872:	443b      	add	r3, r7
 8003874:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800387a:	e021      	b.n	80038c0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	3301      	adds	r3, #1
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2b02      	cmp	r3, #2
 8003886:	d9e7      	bls.n	8003858 <RCC_SetFlashLatency+0x48>
 8003888:	e01a      	b.n	80038c0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800388a:	2300      	movs	r3, #0
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388e:	e014      	b.n	80038ba <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	3338      	adds	r3, #56	; 0x38
 8003896:	443b      	add	r3, r7
 8003898:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800389c:	461a      	mov	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d807      	bhi.n	80038b4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3338      	adds	r3, #56	; 0x38
 80038aa:	443b      	add	r3, r7
 80038ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038b2:	e005      	b.n	80038c0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	3301      	adds	r3, #1
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d9e7      	bls.n	8003890 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <RCC_SetFlashLatency+0x100>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 0207 	bic.w	r2, r3, #7
 80038c8:	4911      	ldr	r1, [pc, #68]	; (8003910 <RCC_SetFlashLatency+0x100>)
 80038ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038d0:	f7fd fe84 	bl	80015dc <HAL_GetTick>
 80038d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038d6:	e008      	b.n	80038ea <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038d8:	f7fd fe80 	bl	80015dc <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e007      	b.n	80038fa <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <RCC_SetFlashLatency+0x100>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1ef      	bne.n	80038d8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3738      	adds	r7, #56	; 0x38
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	080048d4 	.word	0x080048d4
 8003908:	080048dc 	.word	0x080048dc
 800390c:	080048e4 	.word	0x080048e4
 8003910:	58004000 	.word	0x58004000

08003914 <LL_RCC_LSE_IsReady>:
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d101      	bne.n	800392c <LL_RCC_LSE_IsReady+0x18>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <LL_RCC_LSE_IsReady+0x1a>
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <LL_RCC_SetUSARTClockSource>:
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	43db      	mvns	r3, r3
 800394c:	401a      	ands	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	b29b      	uxth	r3, r3
 8003952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <LL_RCC_SetI2SClockSource>:
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800397a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <LL_RCC_SetLPUARTClockSource>:
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_SetI2CClockSource>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80039d2:	43db      	mvns	r3, r3
 80039d4:	401a      	ands	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80039de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <LL_RCC_SetLPTIMClockSource>:
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <LL_RCC_SetRNGClockSource>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <LL_RCC_SetADCClockSource>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <LL_RCC_SetRTCClockSource>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_GetRTCClockSource>:
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_ForceBackupDomainReset>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ad2:	bf00      	nop
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <LL_RCC_ReleaseBackupDomainReset>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d058      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b1c:	f7fe fdc0 	bl	80026a0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b20:	f7fd fd5c 	bl	80015dc <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fd fd58 	bl	80015dc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	74fb      	strb	r3, [r7, #19]
        break;
 8003b3a:	e006      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b3c:	4b7b      	ldr	r3, [pc, #492]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d13c      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003b50:	f7ff ffa7 	bl	8003aa2 <LL_RCC_GetRTCClockSource>
 8003b54:	4602      	mov	r2, r0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d00f      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b6c:	f7ff ffa5 	bl	8003aba <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b70:	f7ff ffb3 	bl	8003ada <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d014      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fd28 	bl	80015dc <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fd fd24 	bl	80015dc <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d902      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ba8:	f7ff feb4 	bl	8003914 <LL_RCC_LSE_IsReady>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d1ee      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff5b 	bl	8003a78 <LL_RCC_SetRTCClockSource>
 8003bc2:	e004      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
 8003bc8:	e001      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fea9 	bl	8003936 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fe9e 	bl	8003936 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fec0 	bl	8003990 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fee6 	bl	80039f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fedb 	bl	80039f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fed0 	bl	80039f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fea9 	bl	80039ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fe9e 	bl	80039ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fe93 	bl	80039ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d011      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fe5e 	bl	8003966 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fea5 	bl	8003a24 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d011      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fea3 	bl	8003a4e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d10:	d107      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d22:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	58000400 	.word	0x58000400

08003d30 <LL_RCC_GetUSARTClockSource>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	4313      	orrs	r3, r2
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <LL_RCC_GetLPUARTClockSource>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4013      	ands	r3, r2
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e042      	b.n	8003e0a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd fb16 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f82d 	bl	8003e14 <UART_SetConfig>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e022      	b.n	8003e0a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa95 	bl	80042fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fb1b 	bl	800443e <UART_CheckIdleState>
 8003e08:	4603      	mov	r3, r0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e18:	b08c      	sub	sp, #48	; 0x30
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b94      	ldr	r3, [pc, #592]	; (8004094 <UART_SetConfig+0x280>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a89      	ldr	r2, [pc, #548]	; (8004098 <UART_SetConfig+0x284>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f023 010f 	bic.w	r1, r3, #15
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7a      	ldr	r2, [pc, #488]	; (800409c <UART_SetConfig+0x288>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d127      	bne.n	8003f08 <UART_SetConfig+0xf4>
 8003eb8:	2003      	movs	r0, #3
 8003eba:	f7ff ff39 	bl	8003d30 <LL_RCC_GetUSARTClockSource>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d81b      	bhi.n	8003f00 <UART_SetConfig+0xec>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0xbc>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ef1 	.word	0x08003ef1
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003ef9 	.word	0x08003ef9
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ee6:	e080      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eee:	e07c      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef6:	e078      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003efe:	e074      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f06:	e070      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a64      	ldr	r2, [pc, #400]	; (80040a0 <UART_SetConfig+0x28c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d138      	bne.n	8003f84 <UART_SetConfig+0x170>
 8003f12:	200c      	movs	r0, #12
 8003f14:	f7ff ff0c 	bl	8003d30 <LL_RCC_GetUSARTClockSource>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d82c      	bhi.n	8003f7c <UART_SetConfig+0x168>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x114>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f7d 	.word	0x08003f7d
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003f7d 	.word	0x08003f7d
 8003f44:	08003f7d 	.word	0x08003f7d
 8003f48:	08003f65 	.word	0x08003f65
 8003f4c:	08003f7d 	.word	0x08003f7d
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f75 	.word	0x08003f75
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f62:	e042      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6a:	e03e      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f72:	e03a      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	e036      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f82:	e032      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a43      	ldr	r2, [pc, #268]	; (8004098 <UART_SetConfig+0x284>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d12a      	bne.n	8003fe4 <UART_SetConfig+0x1d0>
 8003f8e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f92:	f7ff fedf 	bl	8003d54 <LL_RCC_GetLPUARTClockSource>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9c:	d01a      	beq.n	8003fd4 <UART_SetConfig+0x1c0>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa2:	d81b      	bhi.n	8003fdc <UART_SetConfig+0x1c8>
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa8:	d00c      	beq.n	8003fc4 <UART_SetConfig+0x1b0>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d815      	bhi.n	8003fdc <UART_SetConfig+0x1c8>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <UART_SetConfig+0x1a8>
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d008      	beq.n	8003fcc <UART_SetConfig+0x1b8>
 8003fba:	e00f      	b.n	8003fdc <UART_SetConfig+0x1c8>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fc2:	e012      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e00e      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e00a      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e006      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe2:	e002      	b.n	8003fea <UART_SetConfig+0x1d6>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <UART_SetConfig+0x284>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	f040 80a4 	bne.w	800413e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d823      	bhi.n	8004046 <UART_SetConfig+0x232>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x1f0>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004029 	.word	0x08004029
 8004008:	08004047 	.word	0x08004047
 800400c:	08004031 	.word	0x08004031
 8004010:	08004047 	.word	0x08004047
 8004014:	08004037 	.word	0x08004037
 8004018:	08004047 	.word	0x08004047
 800401c:	08004047 	.word	0x08004047
 8004020:	08004047 	.word	0x08004047
 8004024:	0800403f 	.word	0x0800403f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7ff fb9e 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 800402c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800402e:	e010      	b.n	8004052 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <UART_SetConfig+0x290>)
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004034:	e00d      	b.n	8004052 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004036:	f7ff fae3 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800403c:	e009      	b.n	8004052 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004044:	e005      	b.n	8004052 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8137 	beq.w	80042c8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <UART_SetConfig+0x294>)
 8004060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004064:	461a      	mov	r2, r3
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	fbb3 f3f2 	udiv	r3, r3, r2
 800406c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	429a      	cmp	r2, r3
 800407c:	d305      	bcc.n	800408a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004090:	e11a      	b.n	80042c8 <UART_SetConfig+0x4b4>
 8004092:	bf00      	nop
 8004094:	cfff69f3 	.word	0xcfff69f3
 8004098:	40008000 	.word	0x40008000
 800409c:	40013800 	.word	0x40013800
 80040a0:	40004400 	.word	0x40004400
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	08004990 	.word	0x08004990
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	2200      	movs	r2, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	60fa      	str	r2, [r7, #12]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	4a8e      	ldr	r2, [pc, #568]	; (80042f4 <UART_SetConfig+0x4e0>)
 80040ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040ce:	f7fc fcf5 	bl	8000abc <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	020b      	lsls	r3, r1, #8
 80040e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040e8:	0202      	lsls	r2, r0, #8
 80040ea:	6979      	ldr	r1, [r7, #20]
 80040ec:	6849      	ldr	r1, [r1, #4]
 80040ee:	0849      	lsrs	r1, r1, #1
 80040f0:	2000      	movs	r0, #0
 80040f2:	460c      	mov	r4, r1
 80040f4:	4605      	mov	r5, r0
 80040f6:	eb12 0804 	adds.w	r8, r2, r4
 80040fa:	eb43 0905 	adc.w	r9, r3, r5
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	469a      	mov	sl, r3
 8004106:	4693      	mov	fp, r2
 8004108:	4652      	mov	r2, sl
 800410a:	465b      	mov	r3, fp
 800410c:	4640      	mov	r0, r8
 800410e:	4649      	mov	r1, r9
 8004110:	f7fc fcd4 	bl	8000abc <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4613      	mov	r3, r2
 800411a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004122:	d308      	bcc.n	8004136 <UART_SetConfig+0x322>
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412a:	d204      	bcs.n	8004136 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	e0c8      	b.n	80042c8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800413c:	e0c4      	b.n	80042c8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004146:	d168      	bne.n	800421a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800414c:	2b08      	cmp	r3, #8
 800414e:	d828      	bhi.n	80041a2 <UART_SetConfig+0x38e>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x344>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	0800417d 	.word	0x0800417d
 800415c:	08004185 	.word	0x08004185
 8004160:	0800418d 	.word	0x0800418d
 8004164:	080041a3 	.word	0x080041a3
 8004168:	08004193 	.word	0x08004193
 800416c:	080041a3 	.word	0x080041a3
 8004170:	080041a3 	.word	0x080041a3
 8004174:	080041a3 	.word	0x080041a3
 8004178:	0800419b 	.word	0x0800419b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7ff faf4 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004182:	e014      	b.n	80041ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7ff fb02 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8004188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800418a:	e010      	b.n	80041ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800418c:	4b5a      	ldr	r3, [pc, #360]	; (80042f8 <UART_SetConfig+0x4e4>)
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004190:	e00d      	b.n	80041ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004192:	f7ff fa35 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004198:	e009      	b.n	80041ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041a0:	e005      	b.n	80041ae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8089 	beq.w	80042c8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	4a4e      	ldr	r2, [pc, #312]	; (80042f4 <UART_SetConfig+0x4e0>)
 80041bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c8:	005a      	lsls	r2, r3, #1
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	441a      	add	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	b29b      	uxth	r3, r3
 80041dc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d916      	bls.n	8004212 <UART_SetConfig+0x3fe>
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d212      	bcs.n	8004212 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f023 030f 	bic.w	r3, r3, #15
 80041f4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	b29a      	uxth	r2, r3
 8004202:	8bfb      	ldrh	r3, [r7, #30]
 8004204:	4313      	orrs	r3, r2
 8004206:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	8bfa      	ldrh	r2, [r7, #30]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e05a      	b.n	80042c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004218:	e056      	b.n	80042c8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800421a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800421e:	2b08      	cmp	r3, #8
 8004220:	d827      	bhi.n	8004272 <UART_SetConfig+0x45e>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x414>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004255 	.word	0x08004255
 8004230:	0800425d 	.word	0x0800425d
 8004234:	08004273 	.word	0x08004273
 8004238:	08004263 	.word	0x08004263
 800423c:	08004273 	.word	0x08004273
 8004240:	08004273 	.word	0x08004273
 8004244:	08004273 	.word	0x08004273
 8004248:	0800426b 	.word	0x0800426b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7ff fa8c 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004252:	e014      	b.n	800427e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7ff fa9a 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8004258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800425a:	e010      	b.n	800427e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800425c:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <UART_SetConfig+0x4e4>)
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004260:	e00d      	b.n	800427e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004262:	f7ff f9cd 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8004266:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004268:	e009      	b.n	800427e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004270:	e005      	b.n	800427e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800427c:	bf00      	nop
    }

    if (pclk != 0U)
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	2b00      	cmp	r3, #0
 8004282:	d021      	beq.n	80042c8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <UART_SetConfig+0x4e0>)
 800428a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800428e:	461a      	mov	r2, r3
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	fbb3 f2f2 	udiv	r2, r3, r2
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	441a      	add	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2b0f      	cmp	r3, #15
 80042ae:	d908      	bls.n	80042c2 <UART_SetConfig+0x4ae>
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d204      	bcs.n	80042c2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	60da      	str	r2, [r3, #12]
 80042c0:	e002      	b.n	80042c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2200      	movs	r2, #0
 80042dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80042e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3730      	adds	r7, #48	; 0x30
 80042ec:	46bd      	mov	sp, r7
 80042ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f2:	bf00      	nop
 80042f4:	08004990 	.word	0x08004990
 80042f8:	00f42400 	.word	0x00f42400

080042fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01a      	beq.n	8004412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fa:	d10a      	bne.n	8004412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	605a      	str	r2, [r3, #4]
  }
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b086      	sub	sp, #24
 8004442:	af02      	add	r7, sp, #8
 8004444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800444e:	f7fd f8c5 	bl	80015dc <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b08      	cmp	r3, #8
 8004460:	d10e      	bne.n	8004480 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004462:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f82f 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e025      	b.n	80044cc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d10e      	bne.n	80044ac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f819 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e00f      	b.n	80044cc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b09c      	sub	sp, #112	; 0x70
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e4:	e0a9      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	f000 80a5 	beq.w	800463a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7fd f874 	bl	80015dc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <UART_WaitOnFlagUntilTimeout+0x32>
 8004500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004502:	2b00      	cmp	r3, #0
 8004504:	d140      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800451a:	667b      	str	r3, [r7, #100]	; 0x64
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004526:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800452a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e6      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3308      	adds	r3, #8
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	663b      	str	r3, [r7, #96]	; 0x60
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004558:	64ba      	str	r2, [r7, #72]	; 0x48
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800455e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e5      	bne.n	8004538 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e069      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d051      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a4:	d149      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
 80045d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3308      	adds	r3, #8
 80045e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004602:	623a      	str	r2, [r7, #32]
 8004604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e5      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e010      	b.n	800465c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	429a      	cmp	r2, r3
 8004656:	f43f af46 	beq.w	80044e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3770      	adds	r7, #112	; 0x70
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_UARTEx_DisableFifoMode+0x16>
 8004676:	2302      	movs	r3, #2
 8004678:	e027      	b.n	80046ca <HAL_UARTEx_DisableFifoMode+0x66>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2224      	movs	r2, #36	; 0x24
 8004686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e02d      	b.n	8004748 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f84f 	bl	80047cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004764:	2302      	movs	r3, #2
 8004766:	e02d      	b.n	80047c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f811 	bl	80047cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d108      	bne.n	80047ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047ec:	e031      	b.n	8004852 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ee:	2308      	movs	r3, #8
 80047f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047f2:	2308      	movs	r3, #8
 80047f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	0e5b      	lsrs	r3, r3, #25
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	0f5b      	lsrs	r3, r3, #29
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004816:	7bbb      	ldrb	r3, [r7, #14]
 8004818:	7b3a      	ldrb	r2, [r7, #12]
 800481a:	4910      	ldr	r1, [pc, #64]	; (800485c <UARTEx_SetNbDataToProcess+0x90>)
 800481c:	5c8a      	ldrb	r2, [r1, r2]
 800481e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004822:	7b3a      	ldrb	r2, [r7, #12]
 8004824:	490e      	ldr	r1, [pc, #56]	; (8004860 <UARTEx_SetNbDataToProcess+0x94>)
 8004826:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004828:	fb93 f3f2 	sdiv	r3, r3, r2
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	7b7a      	ldrb	r2, [r7, #13]
 8004838:	4908      	ldr	r1, [pc, #32]	; (800485c <UARTEx_SetNbDataToProcess+0x90>)
 800483a:	5c8a      	ldrb	r2, [r1, r2]
 800483c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004840:	7b7a      	ldrb	r2, [r7, #13]
 8004842:	4907      	ldr	r1, [pc, #28]	; (8004860 <UARTEx_SetNbDataToProcess+0x94>)
 8004844:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004846:	fb93 f3f2 	sdiv	r3, r3, r2
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	080049a8 	.word	0x080049a8
 8004860:	080049b0 	.word	0x080049b0

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4d0d      	ldr	r5, [pc, #52]	; (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2600      	movs	r6, #0
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4d0b      	ldr	r5, [pc, #44]	; (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <__libc_init_array+0x44>)
 8004878:	f000 f820 	bl	80048bc <_init>
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2600      	movs	r6, #0
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	080049c0 	.word	0x080049c0
 80048a0:	080049c0 	.word	0x080049c0
 80048a4:	080049c0 	.word	0x080049c0
 80048a8:	080049c4 	.word	0x080049c4

080048ac <memset>:
 80048ac:	4402      	add	r2, r0
 80048ae:	4603      	mov	r3, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <_init>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr

080048c8 <_fini>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr
